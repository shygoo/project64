<html>
<head>
<!--<script src="gl-matrix-min.js"></script>-->
<script src="three.min.js"></script>
<script src="GfxState.js"></script>
<script src="GfxCommand.js"></script>
<script src="GfxOps.js"></script>
</head>
<body>
<input type="file" id="file"><br><br>
<div id="container"></div>

<pre id="ginf"></pre>
<script>

function Viewer(containerDomSelector)
{
    this.gfx = new GfxState();
    this.keysDown = {};

    this.scene = new THREE.Scene();

    this.renderer = new THREE.WebGLRenderer({antialias: false});
    this.renderer.setPixelRatio(window.devicePixelRatio);
    
    this.renderer.setScissorTest(true);
    this.renderer.alpha = true;
    this.renderer.setClearColor(0x222222, 1.0);
    this.renderer.setViewport(0, 0, 800, 600);
    this.renderer.setScissor(0, 0, 800, 600);
    this.renderer.domElement.tabIndex = '0'
    this.renderer.domElement.viewer = this;

    this.renderer.domElement.onkeydown = function(e)
    {
        this.viewer.keysDown[e.keyCode] = true;
    	e.preventDefault();
    	return false;
    }

    this.renderer.domElement.onkeyup = function(e)
    {
    	delete this.viewer.keysDown[e.keyCode];
    	e.preventDefault();
    	return false;
    }

    this.keyEvents = {
	    //27: function(){ _this.resetCamera() }, // esc - reset camera position
	    87: function(viewer){ viewer.camera.translateZ(-10); }, // w - move forward
	    65: function(viewer){ viewer.camera.translateX(-10); }, // a - pan left
	    83: function(viewer){ viewer.camera.translateZ( 10); }, // s - move backward
	    68: function(viewer){ viewer.camera.translateX( 10); }, // d - pan right
	    90: function(viewer){ viewer.camera.translateY(-10); }, // z - move down
	    88: function(viewer){ viewer.camera.translateY( 10); }, // x - move up
	    40: function(viewer){ viewer.camera.rotateX( -0.05); }, // down - rotate down
	    38: function(viewer){ viewer.camera.rotateX(  0.05); }, // up - rotate up
	    37: function(viewer){ viewer.camera.rotateY(  0.05); viewer.camera.rotation.z = 0;}, // left - rotate left
	    39: function(viewer){ viewer.camera.rotateY( -0.05); viewer.camera.rotation.z = 0;}  // right - rotate right
    }

    document.querySelector(containerDomSelector).appendChild(this.renderer.domElement);

    this.camera = new THREE.PerspectiveCamera(60, 800/600, 1, 15000);
    this.camera.rotation.order = "YXZ";
}

Viewer.prototype.animate = function()
{
    for(var k in this.keysDown)
    {
        if(k in this.keyEvents) this.keyEvents[k](this);
    }

    this.renderer.render(this.scene, this.camera)
    requestAnimationFrame(this.animate.bind(this));
}

Viewer.prototype.setSize = function(width, height)
{
    this.renderer.setSize(width, height);
}

Viewer.prototype.loadDumpFile = function(ab)
{
    var dv = new DataView(ab);

    var metaOffset = dv.byteLength - 0x14;
    var meta = {
        signature:              dv.getUint32(metaOffset + 0x00, false),
        microcodeAddress:       dv.getUint32(metaOffset + 0x04, true),
        microcodeChecksum:      dv.getUint32(metaOffset + 0x08, true),
        rootDisplayListAddress: dv.getUint32(metaOffset + 0x0C, true),
        rootDisplayListSize:    dv.getUint32(metaOffset + 0x10, true)
    };

    document.querySelector('#ginf').innerHTML = (
        "ucode address:  " + hex(meta.microcodeAddress) + "\n" +
        "ucode checksum: " + hex(meta.microcodeChecksum) + "\n" +
        "dlist address:  " + hex(meta.rootDisplayListAddress) + "\n"
    );

    // build intermediate mesh
    this.gfx.importOps(GfxOps.RDP, GfxOps.F3DEX2);
    this.gfx.setMainMemory(dv);
    this.gfx.run(meta.rootDisplayListAddress);

    // build threejs scene
    this.buildScene();
}


Viewer.prototype.buildScene = function()
{
    while(this.scene.children.length > 0)
    {
        this.scene.remove(this.scene.children[0]); 
    }

    var geometry = new THREE.Geometry();
    var material = new THREE.MeshBasicMaterial({ color: 0x000000, opacity: 0.5, transparent: true, wireframe: true });
    var material2 = new THREE.MeshBasicMaterial({ color: 0xaaaaaa, opacity: 0.9, transparent: true, polygonOffset: true, polygonOffsetFactor: 1, polygonOffsetUnits: 1});
    
    var faceidx = 0;

    for(var i = 0; i < this.gfx.triangles.length; i++)
    {
        var tri = this.gfx.triangles[i];
        geometry.vertices.push(tri[0]);
        geometry.vertices.push(tri[1]);
        geometry.vertices.push(tri[2]);
        geometry.faces.push(new THREE.Face3(faceidx, faceidx+1, faceidx+2))
        faceidx += 3;
    }

    var mesh = new THREE.Mesh(geometry, material)
    var mesh2 = new THREE.Mesh(geometry, material2)

    this.scene.add(mesh);
    this.scene.add(mesh2);
}

function hex(n)
{
    var s = n.toString(16).toUpperCase();
    while(s.length < 8) s = "0" + s;
    return s;
}

function attachFileReader(query, onloadend)
{
    var domFileInput = document.querySelector(query);
    var reader = new FileReader();
    reader.onloadend = function()
    {
        onloadend(reader.result);
    }

    domFileInput.addEventListener('change', function()
    {
        reader.readAsArrayBuffer(domFileInput.files[0]);
    });
}

attachFileReader('#file', function(ab)
{
    viewer.loadDumpFile(ab);
})

var viewer = new Viewer('#container');
viewer.setSize(800, 600);
viewer.animate();


</script>
</body>