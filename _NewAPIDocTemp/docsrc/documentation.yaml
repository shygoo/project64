# console
- name:    console
  tagline: Console interface
  props:
  - name: console.log
    js:   console.log(message[, ...])
    ts:   "console.log(message: any, ...optionalParams): void"
    desc: |
          Prints all provided arguments to the console with a trailing newline.
          ```
          console.log("Hello", "world!");
          ```
  
  - name: console.print
    js:   console.print(message[, ...])
    ts:   "console.print(message: any, ...optionalParams): void"
    desc: |
          Prints all provided arguments to the console.
          ```
          console.print("Hello ");
          console.print("world!\n");
          ```

  - name: console.clear
    js:   console.clear()
    ts:   "console.clear(): void"
    desc: Clears the console.

  - name: console.listen
    js:   console.listen(inputListener)
    ts:   "console.listen(inputListener: (input: string) => void): void"
    desc: |
          Overrides the default input behavior; console input will be passed to `inputListener` instead of being evaluated as JS code.
          <div class="vtab"></div>
          The listener may be unset by calling `console.listen(undefined)`.
          ```
          console.listen(function(input) {
              var args = input.split(' ');
              var command = args.shift();
              switch(command) {
              case "ping":
                  console.log("pong (args were:", args.join(', '), ")");
                  return;
              case "end":
                  console.log("done");
                  console.listen(undefined);
                  return;
              default:
                  console.log("unknown command '" + command + "'");
              }
          });
          ```

# pj64
- name: pj64
  tagline: Project64 interface
  props:
  - name: pj64.open
    js:   pj64.open(romPath)
    ts:   "pj64.open(romPath: string): boolean"
    desc: Opens and runs a ROM. Does not return until the ROM starts or the operation fails.
          <div class="vtab"></div>
          Returns `true` if the operation is successful.

  - name: pj64.close
    js:   pj64.close()
    ts:   "pj64.close(): void"
    desc: Closes the current ROM.

# mem
- name:    mem
  tagline: N64 memory interface
  props:
  - name: mem._
    js:   mem.u8|u16|u32|s8|s16|s32|f32|f64
    desc: |
          Arrays for reading and writing memory. Virtual addresses are used as indices.
          ```
          // Read some data from ROM and RAM
          var firstWordInROM = mem.u32[0xB0000000];
          var firstWordInRAM = mem.u32[0x80000000];
          ```
          ```
          // Move player to 0,0,0 (SM64 US)
          const pPlayerX = 0x8033B1AC;
          const pPlayerY = 0x8033B1B0;
          const pPlayerZ = 0x8033B1B4;

          mem.f32[pPlayerX] = 0;
          mem.f32[pPlayerY] = 0;
          mem.f32[pPlayerZ] = 0;
          ```

  - name: mem.bindvar
    js:   mem.bindvar(object, address, name, typeId)
    ts:   "mem.bindvar(object: Object, address: number, name: string, typeId: number): void"
    desc: |
          Adds a memory-bound property to `object`.
          Valid types are `u8`, `u16`, `u32`, `s8`, `s16`, `s32`, `f32`, `f64`.
          See [Type IDs](#type_ids) for more details.
          ```
          mem.bindvar(this, 0x8033B1AC, 'playerX', f32);
          mem.bindvar(this, 0x8033B1B0, 'playerY', f32);
          mem.bindvar(this, 0x8033B1B4, 'playerZ', f32);

          console.log("Player's coordinates are ", this.playerX, this.playerY, this.playerZ);
          ```

  - name: mem.bindvars
    js:   mem.bindvars(object, vars)
    ts:  "mem.bindvars(object: Object, vars: any[]): Object"
    desc: |
          Adds multiple memory-bound properties to `object`.
          `vars` must be an array in which each item is an array containing an address, name, and [type ID](#type_ids) (in order) describing a variable.
          <div class="vtab"></div>
          Returns `object`.
          ```
          mem.bindvars(this, [
              [ 0x8033B1AC, 'playerX', f32 ],
              [ 0x8033B1B0, 'playerY', f32 ],
              [ 0x8033B1B4, 'playerZ', f32 ]
          ]);

          console.log("Player's coordinates are ", this.playerX, this.playerY, this.playerZ);
          ```

  - name: mem.bindstruct
    js:   mem.bindstruct(object, address, properties)
    ts:   "mem.bindstruct(object: Object, address: number, properties: Object): Object"
    desc: |
          Adds multiple memory-bound properties to `object`.
          `properties` must be an object in which each key/value pair specifies the name and [type ID](#type_ids) of a variable.
          The offset of a variable is determined by the sum of type sizes of the variables preceding it.
          <div class="vtab"></div>
          Returns `object`.
          <div class="vtab"></div>
          ```
          var playerPos = mem.bindstruct({}, 0x8033B1AC, { x: f32, y: f32, z: f32 });
          console.log("Player's coordinates are ", playerPos.x, playerPos.y, playerPos.z);
          ```

  - name: mem.typedef
    js:   mem.typedef(properties)
    ts:   "mem.typedef(properties: Object): MemTypeConstructor"
    desc: |
          Returns a constructor function that will create an object representing a structure in memory, given its address.
          ```
          const vec3f = mem.typedef({ x: f32, y: f32, z: f32 });
          var playerAngle = new vec3f(0x8033B19C);
          var playerPos = new vec3f(0x8033B1AC);
          ```

  - name: mem.getblock
    js:   mem.getblock(address, length)
    ts:   "mem.getblock(address: number, length: number): Buffer"
    desc: |
          Returns a block of data from memory as a [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html) object.
          ```
          fs.writefile("ram_dump.bin", mem.getblock(K0BASE, mem.ramSize));
          ```

  - name: mem.setblock
    js:   mem.setblock(address, data[, length])
    ts:   "mem.setblock(address: number, data: string | Buffer | TypedArray, length: number): Buffer"
    desc: |
          Writes a block of data into memory. `data` may be one of the following types&#58;
          [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
          [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html),
          [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView),
          [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), string.
          ```
          mem.setblock(0x80400000, fs.readfile("textures.bin"));
          ```

  - name: mem.getstring
    js:   mem.getstring(address[, length])
    ts:   "mem.getblock(address: number, length?: number): string"
    desc: | 
          Returns a zero-terminated ASCII string from memory.
          ```
          const romName = mem.getstring(0xB0000020, 0x14);
          ```

  - name: mem.setstring
    js:   mem.setstring(address, data[, length])
    ts:   "mem.setstring(address: number, data: string | Buffer | TypedArray, length?: number): Buffer"
    desc: |
          Writes a string into memory (alias of [mem.setblock](#mem_setblock)).

  - name: mem.ramSize
    js:   mem.ramSize
    ts:   "mem.ramSize: number"
    desc: The size of RDRAM in bytes. `0` if RDRAM is not initialized.

  - name: mem.romSize
    js:   mem.romSize
    ts:   "mem.romSize: number"
    desc: The size of cartridge ROM in bytes. `0` if ROM is not initialized.

# events
- name:    events
  tagline: Event hooking interface
  props:
  - name: events.onexec
    js:   events.onexec(address, callback)
    ts:   "events.onexec(address: number | AddressRange, callback: (e: CPUExecEvent) => void): number"
    tags: [["Requires interpreter core", "blue"]]
    desc: |
          Registers a callback that is invoked at the beginning of a CPU step if the program counter is at `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          `callback` receives a [CPUExecEvent](#CPUExecEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          ```
          events.onexec(0x802CB1C0, function() {
              console.log("func_802CB1C0 was called");
          });
          ```
          ```
          // Log every CPU step
          events.onexec(ADDR_ANY, function(e) {
              console.log(e.pc.hex() + ": " + asm.decode(mem.u32[e.pc], e.pc));
          });
          ```

  - name: events.onread
    js:   events.onread(address, callback)
    ts:   "events.onread(address: number | AddressRange, callback: (e: CPUReadWriteEvent) => void): number"
    tags: [["Requires interpreter core", "blue"]]
    desc: |
          Registers a callback that is invoked at the beginning of a CPU step if the CPU is going to read from `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          `callback` receives a [CPUReadWriteEvent](#CPUReadWriteEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.

  - name: events.onwrite
    js:   events.onwrite(address, callback)
    ts:   "events.onwrite(address: number | AddressRange, callback: (e: CPUReadWriteEvent) => void): number"
    tags: [["Requires interpreter core", "blue"]]
    desc: |
          Registers a callback that is invoked at the beginning of a CPU step if the CPU is going to write to `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          `callback` receives a [CPUReadWriteEvent](#CPUReadWriteEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          ```
          events.onwrite(PI_WR_LEN_REG, function(e) {
              var romAddr = mem.u32[PI_CART_ADDR_REG] + K1BASE;
              var ramAddr = mem.u32[PI_DRAM_ADDR_REG] + K0BASE;
              var length = e.value + 1;
              console.log("Loaded " + romAddr.hex() + " -> " + ramAddr.hex() + " (Length: " + length.hex() + ")");
          });
          ```

  - name: events.onopcode
    js:   events.onopcode(address, opcode, mask, callback)
    ts:   "events.onopcode(address: number | AddressRange, opcode: number, mask: number, callback: (e: CPUOpcodeEvent) => void): number"
    tags: [["Requires interpreter core", "blue"]]
    desc: |
          Registers a callback that is invoked at the beginning of a CPU step if the program counter is at `address` and
          `opcode` is equal to the current opcode ANDed with `mask`.
          `callback` receives a [CPUOpcodeEvent](#CPUOpcodeEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          ```
          // Log every JAL
          const JAL = asm.encode("jal 0");
          const ANY_TARGET = 0xFC000000; // Mask off target field
          events.onopcode(ADDR_ANY, JAL, ANY_TARGET, function(e) {
              console.log(e.pc.hex() + ": " + asm.decode(mem.u32[e.pc], e.pc));
          });
          ```

  - name: events.ongprvalue
    js:   events.ongprvalue(address, regFlags, value, callback)
    ts:   "events.ongprvalue(address: number | AddressRange, regFlags: number, value: number, callback: (e: CPURegValueEvent) => void): number"
    tags: [["Requires interpreter core", "blue"]]
    desc: |
          Registers a callback that is invoked at the beginning of a CPU step if the program counter is at `address` and at least one of
          the general purpose registers specified by `regFlags` is equal to `value` (lower 32 bits only).
          `callback` receives a [CPURegValueEvent](#CPURegValueEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          <div class="vtab"></div>
          See [General purpose register flags](#GPR_flags) for a list of valid flags. Multiple registers may be specified via bitwise OR.
          ```
          // Break when any general purpose register contains 0x49533634
          const IS64_SIGNATURE = 0x49533634;
          events.ongprvalue(ADDR_ANY, GPR_ANY, IS64_SIGNATURE, function() {
              debug.breakhere();
          });
          ```

  - name: events.onpifread
    js:   events.onpifread(callback)
    ts:   "events.onpifread(callback: (e: EmuEvent) => void): number"
    desc: |
          Registers a callback that is invoked when PIF RAM data is going to be read into RDRAM.
          `callback` receives an [EmuEvent](#EmuEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          <div class="vtab"></div>
          Useful for monitoring and overriding controller input.
          ```
          // Log P1's controller input
          events.onpifread(function() {
              if(mem.u32[PIF_RAM_START + 0x00] == 0xFF010401) {
                  console.log(mem.u32[PIF_RAM_START + 0x04].hex());
              }
          });
          ```

          ```
          // Play an M64 TAS file
          var m64file = fs.readfile("sm64-1key.m64");
          var numSamples = m64file.readUInt32LE(0x018);
          var sampleIndex = 0;
          
          events.onpifread(function() {
              for(var nController = 0; nController < 4; nController++) {
                  var cmdAddr = PIF_RAM_START + (nController * 8);
                  if(mem.u32[cmdAddr + 0x00] == 0xFF010401 && sampleIndex < numSamples) {
                      mem.u32[cmdAddr + 0x04] = m64file.readUInt32BE(0x400 + sampleIndex * 4);
                      sampleIndex++;
                  }
              }
          });
          ```

  - name: events.onsptask
    js:   events.onsptask(callback)
    ts:   "events.onsptask(callback: (e: SPTaskEvent) => void): number"
    desc: |
          Registers a callback that is invoked when a task is sent to the RSP.
          `callback` receives an [SPTaskEvent](#SPTaskEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          <div class="vtab"></div>
          Useful for monitoring and overriding display lists and audio lists.
          ```
          events.onsptask(function(e) {
              if (e.taskType == M_GFXTASK) {
                  console.log("Display list address: " + e.dataAddress);
              }
              else if (e.taskType == M_AUDTASK) {
                  console.log("Audio list address: " + e.dataAddress);
              }
          });
          ```

  - name: events.ondraw
    js:   events.ondraw(callback)
    ts:   "events.ondraw(callback: (e: DrawEvent) => void): number"
    desc: |
          Registers a callback that is invoked when Project64 receives a screen update from the graphics plugin.
          `callback` receives a [DrawEvent](#DrawEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.
          <div class="vtab"></div>
          [DrawEvent](#DrawEvent)'s `drawingContext` property is a [DrawingContext](#DrawingContext) object
          whose methods can be used to draw over or sample the current frame.
          ```
          events.ondraw(function(e) {
              var ctx = e.drawingContext;
              ctx.drawtext(20, 20, "Hello world!");
          });
          ```
          <div class="vtab"></div>
          The event's [DrawingContext](#DrawingContext) object expires when `callback` returns.

  - name: events.onmousedown
    js:   events.onmousedown(callback)
    ts:   "events.onmousedown(callback: (e: MouseEvent) => void): number"
    desc: |
          Registers a callback that is invoked when a mouse button is pressed over the main screen.
          `callback` receives a [MouseEvent](#MouseEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.

  - name: events.onmouseup
    js:   events.onmouseup(callback)
    ts:   "events.onmouseup(callback: (e: MouseEvent) => void): number"
    desc: |
          Registers a callback that is invoked when a mouse button is released over the main screen.
          `callback` receives a [MouseEvent](#MouseEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.

  - name: events.onmousemove
    js:   events.onmousemove(callback)
    ts:   "events.onmousemove(callback: (e: MouseEvent) => void): number"
    desc: |
          Registers a callback that is invoked when the mouse is moved over the main screen.
          `callback` receives a [MouseEvent](#MouseEvent) object.
          <div class="vtab"></div>
          Returns a callback ID.

  - name: events.remove
    js:   events.remove(callbackId)
    ts:   "events.remove(callbackId: number): void"
    desc: |
          Unregisters the callback specified by `callbackId`.
          ```
          // This callback will only be invoked once
          events.onexec(0x802CB1C0, function(e) {
              console.log("func_802CB1C0 was called");
              events.remove(e.callbackId);
          });
          ```

  - name: EmuEvent
    js:   EmuEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          </table>

  - name: CPUExecEvent
    js:   CPUExecEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.pc`</td><td>Program counter address.</td></tr>
          </table>

  - name: CPUReadWriteEvent
    js:   CPUReadWriteEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.pc`</td><td>Program counter address.</td></tr>
          <tr><td>`e.address`</td><td>Address that the CPU is going to read/write.</td></tr>
          <tr><td>`e.fpu`</td><td>`true` if the source/destination register is on the floating point unit.</td></tr>
          <tr><td>`e.reg`</td><td>Index of the source/destination register.</td></tr>
          <tr><td>`e.valueType`</td><td>The value's [type ID](#type_ids). Varies depending on the opcode; refer to the table below.</td></tr>
          <tr><td>`e.value`</td><td>Value that the CPU is going to read/write.</td></tr>
          <tr><td>`e.valueHi`</td><td>Upper 32 bits of the value if `e.valueType` is `u64`; otherwise `undefined`.</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <thead><tr><td><b>e.type</b></td><td><b>Opcode(s)</b></td></tr></thead>
          <tr><td>`s8`</td><td>LB, SB</td></tr>
          <tr><td>`u8`</td><td>LBU</td></tr>
          <tr><td>`s16`</td><td>LH, SH</td></tr>
          <tr><td>`u16`</td><td>LHU</td></tr>
          <tr><td>`s32`</td><td>LL, LW, LWL, LWR, SW, SWL, SWR</td></tr>
          <tr><td>`u32`</td><td>LWU</td></tr>
          <tr><td>`u64`</td><td>LD, LDL, LDR, SD, SDL, SDR</td></tr>
          <tr><td>`f32`</td><td>LWC1, SWC1</td></tr>
          <tr><td>`f64`</td><td>LDC1, SDC1</td></tr>
          </table>

  - name: CPUOpcodeEvent
    js:   CPUOpcodeEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.pc`</td><td>Program counter address.</td></tr>
          <tr><td>`e.opcode`</td><td>The opcode.</td></tr>
          </table>

  - name: CPURegValueEvent
    js:   CPURegValueEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.pc`</td><td>Program counter address.</td></tr>
          <tr><td>`e.value`</td><td>The value.</td></tr>
          <tr><td>`e.reg`</td><td>Index of the register containing the value.</td></tr>
          </table>

  - name: SPTaskEvent
    js:   SPTaskEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`       </td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.taskType`         </td><td>The task type. 1 (M_GFXTASK) for graphics tasks, or 2 (M_AUDTASK) for audio tasks.</td></tr>
          <tr><td>`e.taskFlags`        </td><td>Task flags.</td></tr>
          <tr><td>`e.ucodeBootAddress` </td><td>Address of the boot microcode.</td></tr>
          <tr><td>`e.ucodeBootSize`    </td><td>Size of the boot microcode.</td></tr>
          <tr><td>`e.ucodeAddress`     </td><td>Address of the task microcode.</td></tr>
          <tr><td>`e.ucodeSize`        </td><td>Size of the task microcode.</td></tr>
          <tr><td>`e.ucodeDataAddress` </td><td>Address of the microcode data.</td></tr>
          <tr><td>`e.ucodeDataSize`    </td><td>Size of the microcode data.</td></tr>
          <tr><td>`e.dramStackAddress` </td><td>Address of the DRAM matrix stack.</td></tr>
          <tr><td>`e.dramStackSize`    </td><td>Size of the DRAM matrix stack.</td></tr>
          <tr><td>`e.outputBuffAddress`</td><td>DP command buffer address for "_dram" and "_fifo" graphics microcodes.</td></tr>
          <tr><td>`e.outputBuffSize`   </td><td>DP command buffer size for "_dram" and "_fifo" graphics microcodes.</td></tr>
          <tr><td>`e.dataAddress`      </td><td>Address of the display list or audio list.</td></tr>
          <tr><td>`e.dataSize`         </td><td>Size of the display list or audio list.</td></tr>
          <tr><td>`e.yieldDataAddress` </td><td>Address of the yield data buffer.</td></tr>
          <tr><td>`e.yieldDataSize`    </td><td>Size of the yield data buffer.</td></tr>
          </table>
          <div class="vtab"></div>
          Note: The properties of this object differ slightly from those in the OSTask structure;
          all physical addresses are converted to KSEG0 addresses.

  - name: DrawEvent
    js:   DrawEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.drawingContext`</td><td>[DrawingContext](#DrawingContext) object.</td></tr>
          </table>

  - name: MouseEvent
    js:   MouseEvent
    desc: |
          <table>
          <tr><td>`e.callbackId`</td><td>ID of the callback associated with the event.</td></tr>
          <tr><td>`e.button`</td><td>The mouse button. `0` = left, `1` = middle, `2` = right. `-1` if not applicable.</td></tr>
          <tr><td>`e.x`</td><td>Cursor X position.</td></tr>
          <tr><td>`e.y`</td><td>Cursor Y position.</td></tr>
          </table>

  - name: GPR_flags
    js:   General purpose register flags
    desc: |
          Global flags for [events.ongprvalue](#events_ongprvalue)'s `regFlags` parameter.
          <pre>
          `GPR_ANY`

          `GPR_R0` `GPR_AT` `GPR_V0` `GPR_V1` `GPR_A0` `GPR_A1` `GPR_A2` `GPR_A3`
          `GPR_T0` `GPR_T1` `GPR_T2` `GPR_T3` `GPR_T4` `GPR_T5` `GPR_T6` `GPR_T7`
          `GPR_S0` `GPR_S1` `GPR_S2` `GPR_S3` `GPR_S4` `GPR_S5` `GPR_S6` `GPR_S7`
          `GPR_T8` `GPR_T9` `GPR_K0` `GPR_K1` `GPR_GP` `GPR_SP` `GPR_FP` `GPR_RA`
          </pre>

  - name: AddressRange
    js:   new AddressRange(start, end)
    ts:   "new AddressRange(start: number, end: number)"
    desc: |
          Creates an immutable object with `start` and `end` address properties.
          <div class="vtab"></div>
          The following `AddressRange` objects are defined globally&#58;
          <div class="vtab"></div>
          <table>
          <tr><td>`ADDR_ANY`              </td><td>0x00000000 &#58; 0xFFFFFFFF</td><td>Any address</td></tr>
          <tr><td>`ADDR_ANY_KUSEG`        </td><td>0x00000000 &#58; 0x7FFFFFFF</td><td>MIPS user mode TLB mapped segment</td></tr>
          <tr><td>`ADDR_ANY_KSEG0`        </td><td>0x80000000 &#58; 0x9FFFFFFF</td><td>MIPS cached unmapped segment</td></tr>
          <tr><td>`ADDR_ANY_KSEG1`        </td><td>0xA0000000 &#58; 0xBFFFFFFF</td><td>MIPS uncached unmapped segment</td></tr>
          <tr><td>`ADDR_ANY_KSEG2`        </td><td>0xC0000000 &#58; 0xFFFFFFFF</td><td>MIPS kernel mode TLB mapped segment</td></tr>
          <tr><td>`ADDR_ANY_RDRAM`        </td><td>0x80000000 &#58; 0x807FFFFF</td><td>Cached RDRAM</td></tr>
          <tr><td>`ADDR_ANY_RDRAM_UNC`    </td><td>0xA0000000 &#58; 0xA07FFFFF</td><td>Uncached RDRAM</td></tr>
          <tr><td>`ADDR_ANY_CART_ROM`     </td><td>0x90000000 &#58; 0x95FFFFFF</td><td>Cached cartridge ROM</td></tr>
          <tr><td>`ADDR_ANY_CART_ROM_UNC` </td><td>0xB0000000 &#58; 0xB5FFFFFF</td><td>Uncached cartridge ROM</td></tr>
          </table>

# screen
- name:    DrawingContext
  tagline: Screen drawing context
  desc: |
        Screen drawing context
        <div class="vtab"></div>
        This object is accessed via [events.ondraw](#events_ondraw).
        ```
        events.ondraw(function(e) {
            var ctx = e.drawingContext;
            ctx.drawtext(20, 20, "Hello world!");
        });
        ```
        Note: Not compatible with Windows XP. A Direct3D graphics plugin may be required on Windows 7.
  props:
  - name: ctx.drawtext
    js:   ctx.drawtext(x, y, text)
    ts:   "ctx.drawtext(x: number, y: number, text: string): void"
    desc: |
          Prints text to the screen at the provided `x` and `y` coordinates.
          ```
          events.ondraw(function(e) {
              var ctx = e.drawingContext;
              ctx.drawtext(20, 20, "Power: " + mem.u8[0x8033B21E]);
          });
          ```

  - name: ctx.fillrect
    js:   ctx.fillrect(x, y, width, height)
    ts:   "ctx.fillrect(x: number, y: number, width: number, height: number): void"
    desc: Fills the specified rectangle area with the current fill color.

  - name: ctx.strokerect
    js:   ctx.strokerect(x, y, width, height)
    ts:   "ctx.strokerect(x: number, y: number, width: number, height: number): void"
    desc: Outlines the specified rectangle area with the current stroke color/width.

  - name: ctx.beginpath
    js:   ctx.beginpath()
    ts:   ctx.beginpath()
    desc: Clears all stored sub-paths.

  - name: ctx.moveto
    js:   ctx.moveto(x, y)
    ts:   "ctx.moveto(x: number, y: number): void"
    desc: Starts a new sub-path at the provided coordinates.

  - name: ctx.lineto
    js:   ctx.lineto(x, y)
    ts:   "ctx.lineto(x: number, y: number): void"
    desc: Adds a point to the current sub-path.

  - name: ctx.stroke
    js:   ctx.stroke()
    ts:   "ctx.stroke()"
    desc: Strokes all sub-paths.

  - name: ctx.fill
    js:   ctx.fill()
    ts:   "ctx.fill()"
    desc: Fills all sub-paths.

  - name: ctx.width
    js:   ctx.width
    ts:   "ctx.width: number"
    desc: Width of the screen. Read-only.

  - name: ctx.height
    js:   ctx.height
    ts:   "ctx.height: number"
    desc: Height of the screen. Read-only.

  - name: ctx.fillColor
    js:   ctx.fillColor
    ts:   "ctx.fillColor: number"
    desc: |
          The current fill color. `COLOR_WHITE` (`0xFFFFFFFF`) by default.
          ```
          ctx.fillColor = COLOR_GREEN;
          ```
          See also: [Predefined colors](#Predefined_colors).

  - name: ctx.strokeColor
    js:   ctx.strokeColor
    ts:   "ctx.strokeColor: number"
    desc: |
          The current stroke color. `COLOR_BLACK` (`0x000000FF`) by default.

  - name: ctx.strokeWidth
    js:   ctx.strokeWidth
    ts:   "ctx.strokeWidth: number"
    desc: |
          The current stroke width. `0.0` by default.

  - name: ctx.fontFamily
    js:   ctx.fontFamily
    ts:   "ctx.fontFamily: string"
    desc: |
          The current font family. `"Courier New"` by default.

  - name: ctx.fontWeight
    js:   ctx.fontWeight
    ts:   "ctx.fontWeight: string"
    desc: |
          The current font weight. Valid weights include `"normal"`, `"bold"`, and `"light"`. `"normal"` by default.

  - name: ctx.fontSize
    js:   ctx.fontSize
    ts:   "ctx.fontSize: number"
    desc: |
          The current font size. `14.0` by default.

  - name: Predefined_colors
    js:   Predefined colors
    desc: |
          <table>
          <tr><td>`COLOR_BLACK`</td><td>   0x000000FF</td></tr>
          <tr><td>`COLOR_WHITE`</td><td>   0xFFFFFFFF</td></tr>
          <tr><td>`COLOR_GRAY`</td><td>    0x808080FF</td></tr>
          <tr><td>`COLOR_RED`</td><td>     0xFF0000FF</td></tr>
          <tr><td>`COLOR_GREEN`</td><td>   0x00FF00FF</td></tr>
          <tr><td>`COLOR_BLUE`</td><td>    0x0000FFFF</td></tr>
          <tr><td>`COLOR_YELLOW`</td><td>  0xFFFF00FF</td></tr>
          <tr><td>`COLOR_CYAN`</td><td>    0x00FFFFFF</td></tr>
          <tr><td>`COLOR_MAGENTA`</td><td> 0xFF00FFFF</td></tr>
          </table>

# N64Image
- name: N64Image
  tagline: N64 image class
  props:
  - name: new_N64Image
    js:   new N64Image(format, width, height[, data[, palette]])
    ts:   "new N64Image(format: number, width: number, height: number, data?: Buffer, palette?: Buffer)"
    desc: |
          Creates an [N64Image](#N64Image) object.
          <div class="vtab"></div>
          `format`&#58; The desired image format. Refer to the table below.<br>
          `width`&#58; Width of the image.<br>
          `height`&#58; Height of the image.<br>
          `data`&#58; Optional [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html) object containing pixel data.
          The byte length must be equal to `(width * height * N64Image.bpp(format)) / 8`. Copied to [image.data](#image_data).<br>
          `palette`&#58; Optional [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html) object containing palette data. Copied to [image.palette](#image_palette).
          <div class="vtab"></div>
          <table>
          <thead>
          <tr><td>Format</td><td>Data</td><td>Palette</td></tr>
          </thead>
          <tr><td>`IMG_RGBA16`    </td><td>16-bit colors (r5g5b5a1)            </td><td>(not used)</td></tr>
          <tr><td>`IMG_RGBA32`    </td><td>32-bit colors (r8g8b8a8)            </td><td>(not used)</td></tr>
          <tr><td>`IMG_CI4_RGBA16`</td><td>4-bit color indices                 </td><td>16-bit colors (r5g5b5a1)</td></tr>
          <tr><td>`IMG_CI4_IA16`  </td><td>4-bit color indices                 </td><td>16-bit intensity/alpha values (i8a8)</td></tr>
          <tr><td>`IMG_CI8_RGBA16`</td><td>8-bit color indices                 </td><td>16-bit colors (r5g5b5a1)</td></tr>
          <tr><td>`IMG_CI8_IA16`  </td><td>8-bit color indices                 </td><td>16-bit intensity/alpha values (i8a8)</td></tr>
          <tr><td>`IMG_IA4`       </td><td>4-bit intensity/alpha values (i3a1) </td><td>(not used)</td></tr>
          <tr><td>`IMG_IA8`       </td><td>8-bit intensity/alpha values (i4a4) </td><td>(not used)</td></tr>
          <tr><td>`IMG_IA16`      </td><td>16-bit intensity/alpha values (i8a8)</td><td>(not used)</td></tr>
          <tr><td>`IMG_I4`        </td><td>4-bit intensity values              </td><td>(not used)</td></tr>
          <tr><td>`IMG_I8`        </td><td>8-bit intensity values              </td><td>(not used)</td></tr>
          </table>

  - name: N64Image_fromPNG
    js:   N64Image.fromPNG(pngData[, format])
    ts:   "N64Image.fromPNG(pngData: Buffer, format?: number = IMG_RGBA32): N64Image"
    desc: |
          Static function. Creates an [N64Image](#N64Image) object from a PNG file.
          ```
          var image = N64Image.fromPNG(fs.readfile("image.png"));
          ```
          Color quantization is not implemented. An error is thrown if `format` is a color-index (CI) type
          and the color count of the PNG image exceeds the maximum number of colors supported. The maximum
          number of colors supported by the CI4 and CI8 formats are 16 and 256, respectively.

  - name: N64Image_format
    js: N64Image.format(gbiFmt, gbiSiz[, gbiTlutFmt])
    ts: "N64Image.format(gbiFmt: number, gbiSiz: number, gbiTlutFmt?: number): number"
    desc: |
          Static function. Returns a simplified image format number from a given GBI pixel size and format configuration.
          Returns `-1` if the configuration is invalid or unsupported. See the table below for supported configurations.
          <div class="vtab"></div>
          <table>
          <thead>
          <tr><td>`gbiFmt`      </td><td>`gbiSiz`     </td><td>`gbiTlutFmt` </td><td>Return value</td></tr>
          </thead>
          <tr><td>`G_IM_FMT_RGBA` </td><td>`G_IM_SIZ_16b` </td><td>(not used)   </td><td>`IMG_RGBA16`</td></tr>
          <tr><td>`G_IM_FMT_RGBA` </td><td>`G_IM_SIZ_32b` </td><td>(not used)   </td><td>`IMG_RGBA32`</td></tr>
          <tr><td>`G_IM_FMT_CI`   </td><td>`G_IM_SIZ_4b`  </td><td>`G_TT_RGBA16`</td><td>`IMG_CI4_RGBA16`</td></tr>
          <tr><td>`G_IM_FMT_CI`   </td><td>`G_IM_SIZ_4b`  </td><td>`G_TT_IA16`  </td><td>`IMG_CI4_IA16`</td></tr>
          <tr><td>`G_IM_FMT_CI`   </td><td>`G_IM_SIZ_8b`  </td><td>`G_TT_RGBA16`</td><td>`IMG_CI8_RGBA16`</td></tr>
          <tr><td>`G_IM_FMT_CI`   </td><td>`G_IM_SIZ_8b`  </td><td>`G_TT_IA16`  </td><td>`IMG_CI8_IA16`</td></tr>
          <tr><td>`G_IM_FMT_IA`   </td><td>`G_IM_SIZ_4b`  </td><td>(not used)   </td><td>`IMG_IA4`</td></tr>
          <tr><td>`G_IM_FMT_IA`   </td><td>`G_IM_SIZ_8b`  </td><td>(not used)   </td><td>`IMG_IA8`</td></tr>
          <tr><td>`G_IM_FMT_IA`   </td><td>`G_IM_SIZ_16b` </td><td>(not used)   </td><td>`IMG_IA16`</td></tr>
          <tr><td>`G_IM_FMT_I`    </td><td>`G_IM_SIZ_4b`  </td><td>(not used)   </td><td>`IMG_I4`</td></tr>
          <tr><td>`G_IM_FMT_I`    </td><td>`G_IM_SIZ_8b`  </td><td>(not used)   </td><td>`IMG_I8`</td></tr>
          </table>

  - name: N64Image_bpp
    js:   N64Image.bpp(format)
    ts:   "N64Image.bpp(format: number): number"
    desc: |
          Static function. Returns the number of bits used per pixel for a given image format number or `G_IM_SIZ_*` constant. Does not include bits used for palette data.
          ```
          N64Image.bpp(IMG_CI8_RGBA16); // 8
          N64Image.bpp(G_IM_SIZ_16b); // 16
          ```

  - name: image_toPNG
    js:   image.toPNG()
    ts:   "image.toPNG(): Buffer"
    desc: |
          Returns a PNG representation of the image data as a [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html) object.
          ```
          fs.writefile("image.png", image.toPNG());
          ```

  - name: image_format
    js:   image.format
    ts:   "image.format: number"
    desc: The format ID.

  - name: image_width
    js:   image.width
    ts:   "image.width: number"
    desc: Width of the image.

  - name: image_height
    js:   image.height
    ts:   "image.height: number"
    desc: Height of the image.

  - name: image_data
    js:   image.data
    ts:   "image.data: Buffer"
    desc: The pixel data of the image.

  - name: image_palette
    js:   image.palette
    ts:   "image.palette: Buffer"
    desc: The palette data of the image. `null` if the image does not use a color-index format.

# cpu
- name:    cpu
  tagline: CPU register interface
  props:
  - name: cpu.pc
    js:   cpu.pc
    desc: Variable representing the CPU's program counter.

  - name: cpu.hi
    js:   cpu.hi
    desc: Variable representing the lower 32 bits of the CPU's HI register.

  - name: cpu.lo
    js:   cpu.lo
    desc: Variable representing the lower 32 bits of the CPU's LO register.

  - name: cpu.uhi
    js:   cpu.uhi
    desc: Variable representing the upper 32 bits of the CPU's HI register.

  - name: cpu.ulo
    js:   cpu.ulo
    desc: Variable representing the upper 32 bits of the CPU's LO register.

  - name: cpu.gpr._
    js:   cpu.gpr.r0|at|v0|v1..ra
    js2:  cpu.gpr[0..31]
    ts:   cpu.gpr.r0|at|v0|v1|a0|a1|a2|a3|t0|t1|t2|t3|t4|t5|t6|t7|s0|s1|s2|s3|s4|s5|s6|s7|t8|t9|k0|k1|gp|sp|fp|ra
    desc: Variables representing the lower 32 bits of the CPU's general purpose registers.

  - name: cpu.ugpr._
    js:   cpu.ugpr.r0|at|v0|v1..ra
    js2:  cpu.ugpr[0..31]
    ts:   cpu.ugpr.r0|at|v0|v1|a0|a1|a2|a3|t0|t1|t2|t3|t4|t5|t6|t7|s0|s1|s2|s3|s4|s5|s6|s7|t8|t9|k0|k1|gp|sp|fp|ra
    desc: Variables representing the upper 32 bits of the CPU's general purpose registers.

  - name: cpu.fpr._
    js:   cpu.fpr.f0..f31
    js2:  cpu.fpr[0..31]
    desc: Variables representing the CPU's 32-bit floating-point registers.

  - name: cpu.dfpr._
    js:   cpu.dfpr.f0..f30
    js2:  cpu.dfpr[0..30]
    desc: Variables representing the CPU's 64-bit floating-point registers.

  - name: cpu.cop0.index
    js:   cpu.cop0.index
    desc: Variable representing the Index register.
  - name: cpu.cop0.random
    js:   cpu.cop0.random
    desc: Variable representing the Random register.
  - name: cpu.cop0.entrylo0
    js:   cpu.cop0.entrylo0
    desc: Variable representing the EntryLo0 register.
  - name: cpu.cop0.entrylo1
    js:   cpu.cop0.entrylo1
    desc: Variable representing the EntryLo1 register.
  - name: cpu.cop0.context
    js:   cpu.cop0.context
    desc: Variable representing the Context register.
  - name: cpu.cop0.pagemask
    js:   cpu.cop0.pagemask
    desc: Variable representing the PageMask register.
  - name: cpu.cop0.wired
    js:   cpu.cop0.wired
    desc: Variable representing the Wired register.
  - name: cpu.cop0.badvaddr
    js:   cpu.cop0.badvaddr
    desc: Variable representing the BadVAddr register.
  - name: cpu.cop0.count
    js:   cpu.cop0.count
    desc: Variable representing the Count register.
  - name: cpu.cop0.entryhi
    js:   cpu.cop0.entryhi
    desc: Variable representing the EntryHi register.
  - name: cpu.cop0.compare
    js:   cpu.cop0.compare
    desc: Variable representing the Compare register.
  - name: cpu.cop0.status
    js:   cpu.cop0.status
    desc: Variable representing the Status register.
  - name: cpu.cop0.cause
    js:   cpu.cop0.cause
    desc: Variable representing the Cause register. Updates interrupts when written.
  - name: cpu.cop0.epc
    js:   cpu.cop0.epc
    desc: Variable representing the EPC register.
  - name: cpu.cop0.config
    js:   cpu.cop0.config
    desc: Variable representing the Config register.
  - name: cpu.cop0.taglo
    js:   cpu.cop0.taglo
    desc: Variable representing the TagLo register.
  - name: cpu.cop0.taghi
    js:   cpu.cop0.taghi
    desc: Variable representing the TagHi register.
  - name: cpu.cop0.errorepc
    js:   cpu.cop0.errorepc
    desc: Variable representing the ErrorEPC register.

# debug
- name: debug
  tagline: Debugger interface
  props:
  - name: debug.breakhere
    js:   debug.breakhere()
    ts:   "debug.breakhere(): void"
    desc: |
          Pauses emulation and shows the CPU commands window. Useful for creating conditional breakpoints.
          ```
          // Break if the CPU tries to write 5 to 0x80339EA8
          events.onwrite(0x80339EA8, function(e) {
              if(e.value == 5) {
                  debug.breakhere();
              }
          });
          ```
  
  - name: debug.resume
    js:   debug.resume()
    ts:   "debug.resume(): void"
    desc: |
          Resumes emulation after a debug break. 

  - name: debug.skip
    js:   debug.skip()
    ts:   "debug.skip(): void"
    desc: |
          Skips the current CPU command. Useful for preventing or overriding an operation.
          ```
          // Do not let the CPU write to 0x8033B21E
          events.onwrite(0x8033B21E, function() {
              debug.skip();
          });
          ```

  - name: debug.showmemory
    js:   debug.showmemory(address)
    ts:   "debug.showmemory(address: number): void"
    desc: Shows the memory window at `address`.

  - name: debug.showcommands
    js:   debug.showcommands(address)
    ts:   "debug.showcommands(address: number): void"
    desc: Shows the CPU commands window at `address`.


# asm
- name: asm
  tagline: ASM utilities
  props:

  - name: asm.encode
    js:   "asm.encode(command[, address])"
    ts:   "asm.encode(command: string, address?: number): number"
    desc: |
          Encodes a single MIPS R4300i opcode. `address` is an optional parameter that may be used to hint the address of the instruction for branch offset calculation.
          <div class="vtab"></div>
          Returns the opcode as a number.
          ```
          asm.encode("nop");                      // 0x00000000
          asm.encode("addiu sp, sp, -24");        // 0x27BDFFE8
          asm.encode("b 0x80400000", 0x803FFF00); // 0x1000003F
          asm.encode("b 0x80400000", 0x80400100); // 0x1000FFBF
          ```

  - name: asm.decode
    js:   asm.decode(opcode[, address])
    ts:   "asm.decode(opcode: number, address?: number)"
    desc: |
          Decodes a single MIPS R4300i opcode. `address` is an optional parameter that may be used to hint the address of the instruction for branch address calculation.
          <div class="vtab"></div>
          Returns a line of assembly code as a string.
          ```
          asm.decode(0x00000000);             // "NOP"
          asm.decode(0x27BDFFE8);             // "ADDIU SP, SP, -0x18"
          asm.decode(0x1000003F, 0x803FFF00); // "B 0x80400000"
          asm.decode(0x1000FFBF, 0x80400100); // "B 0x80400000"
          ```

  - name: asm.gprname
    js:   asm.gprname(regIndex)
    ts:   "asm.gprname(regIndex: number): string"
    desc: |
          Returns the name of the general purpose register specified by `regIndex`.
          ```
          asm.gprname(4); // Returns "a0"
          ```

# fs
- name: fs
  tagline: File system interface
  props:
  - name: fs.open
    js:   fs.open(path, mode)
    ts:   "fs.open(path: string, mode: string): number"
    desc: |
          Opens the file pointed to by `path` in the mode specified by `mode`.
          See [fopen](https://pubs.opengroup.org/onlinepubs/009604599/functions/fopen.html) for a list of valid modes.
          <div class="vtab"></div>
          Returns a file descriptor.

  - name: fs.close
    js:   fs.close(fd)
    ts:   "fs.close(fd): void"
    desc: Closes the file referenced by `fd`.

  - name: fs.write
    js:   fs.write(fd, buffer[, offset[, length[, position]]])
    ts:   "fs.write(fd: number, buffer: string | Buffer | ArrayBuffer, offset?: number, length?: number, position?: number): number"
    desc: |
          Writes `buffer` to the file referenced by file descriptor `fd`. `buffer` may be one of the following types&#58;
          [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
          [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html),
          [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView),
          [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), string.
          <div class="vtab"></div>
          `offset`&#58; Optional position in the source buffer.<br>
          `length`&#58; Optional maximum number of bytes to write.<br>
          `position`&#58; Optional file position.
          <div class="vtab"></div>
          Returns the number of bytes written.
          ```
          var fd = fs.open("file.txt", "wb");
          fs.write(fd, "Hello ");
          fs.write(fd, "world!\n");
          fs.close();
          ```

  - name: fs.writefile
    js:   fs.writefile(path, buffer)
    ts:   "fs.writefile(path: string, buffer: string | Buffer | ArrayBuffer): void"
    desc: |
          Writes `buffer` to the file specified by `path`.
          ```
          fs.writefile("ram_dump.bin", mem.getblock(K0BASE, mem.ramSize));
          ```

  - name: fs.read
    js:   fs.read(fd, buffer, offset, length, position)
    ts:   "fs.read(fd: number, buffer: Buffer | ArrayBuffer, offset: number, length: number, position: number) : number"
    desc: |
          Reads data from the file referenced by `fd` into `buffer`. `buffer` may be one of the following types&#58;
          [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
          [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html),
          [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView),
          [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).<br><br>
          `offset`&#58; Position in the source buffer.<br>
          `length`&#58; Number of bytes to read.<br>
          `position`&#58; File position.
          <div class="vtab"></div>
          Returns the number of bytes read.

  - name: fs.readfile
    js:   fs.readfile(path)
    ts:   "fs.readfile(path: string): Buffer"
    desc: |
          Returns a [Buffer](https://nodejs.org/docs/v6.9.1/api/buffer.html) object representing the data of the file specified by `path`.
          Uses mode "rb" internally.

  - name: fs.fstat
    js:   fs.fstat(fd)
    ts:   "fs.fstat(fd: number): fs.Stats"
    desc: |
          Returns an [fs.Stats](#fs_Stats) object containing information about the file referenced by `fd`.

  - name: fs.stat
    js:   fs.stat(path)
    ts:   "fs.stat(path: string): fs.Stats"
    desc: |
          Returns an [fs.Stats](#fs_Stats) object containing information about the file specified by `path`.

  - name: fs.unlink
    js:   fs.unlink(path)
    ts:   "fs.unlink(path: string): boolean"
    desc: |
          Deletes the file specified by `path`. Returns `true` if the operation is successful.

  - name: fs.mkdir
    js:   fs.mkdir(path)
    ts:   "fs.mkdir(path: string): boolean"
    desc: |
          Creates a directory. Returns `true` if the operation is successful.

  - name: fs.rmdir
    js:   fs.rmdir(path)
    ts:   "fs.rmdir(path: string): boolean"
    desc: |
          Deletes a directory. The directory must be empty. Returns `true` if the operation is successful.

  - name: fs.readdir
    js:   "fs.readdir(path)"
    ts:   "fs.readdir(path: string): string[]"
    desc: |
          Returns an array of file names from a directory.

  - name: fs.Stats
    js:   fs.Stats
    desc: |
          Object containing information about a file or directory. Generated by [fs.fstat/fs.stat](#fs_fstat).
          <div class="vtab"></div>
          <table>
          <tr><td>`stats.dev`</td><td>ID of the device the file resides on</td></tr>
          <tr><td>`stats.ino`</td><td>inode number</td></tr>
          <tr><td>`stats.mode`</td><td>File permissions</td></tr>
          <tr><td>`stats.nlink`</td><td>Number of links to the file</td></tr>
          <tr><td>`stats.uid`</td><td>User ID</td></tr>
          <tr><td>`stats.gid`</td><td>Group ID</td></tr>
          <tr><td>`stats.rdev`</td><td>Device ID (if file is character or block special)</td></tr>
          <tr><td>`stats.size`</td><td>Size of the file in bytes</td></tr>
          <tr><td>`stats.atimeMs`</td><td>Last access timestamp in milliseconds</td></tr>
          <tr><td>`stats.mtimeMs`</td><td>Last modification timestamp in milliseconds</td></tr>
          <tr><td>`stats.ctimeMs`</td><td>Creation timestamp in milliseconds</td></tr>
          <tr><td>`stats.atime`</td><td>JS Date object representing the last access time</td></tr>
          <tr><td>`stats.mtime`</td><td>JS Date object representing the last modification time</td></tr>
          <tr><td>`stats.ctime`</td><td>JS Date object representing the creation time</td></tr>
          </table>
          <div class="vtab"></div>
          <b>stats.isDirectory()</b><br>
          <div class="tsproto">stats.isDirectory(): boolean</div>
          <div class="vtab"></div>
          Returns `true` if the `fs.Stats` object describes a directory.
          <div class="vtab"></div>
          <b>stats.isFile()</b><br>
          <div class="tsproto">stats.isFile(): boolean</div>
          <div class="vtab"></div>
          Returns `true` if the `fs.Stats` object describes a regular file.

# script
- name: script
  tagline: Script instance configuration interface
  props:
  - name: script.keepalive
    js:   script.keepalive(keepAlive)
    ts:   "script.keepalive(keepAlive: boolean): void"
    desc: |
          Prevents the script instance from being destroyed when it has nothing left to do.
          Useful when the default console input behavior is desired.

  - name: script.timeout
    js:   script.timeout(milliseconds)
    ts:   "script.timeout(milliseconds: number): void"
    desc: |
          Sets the maximum amount of time tasks may run on the script instance before errors are thrown. By default this value is 500 milliseconds.
          Setting this value to zero will allow tasks to run indefinitely.

# global functions
- name: Global functions
  props:
  - name: require
    js:   require(id)
    ts:   "require(id: string): Object"
    desc: |
          Loads a module script and returns its `module.exports` object. `id` may be one of the following:
          <ul>
          <li>The name of a JavaScript file in the `Scripts/modules` directory.</i>
          <li>If `id` begins with `./` or `../`, the path of a JavaScript file relative to the calling module's location.</i>
          </ul>
          <div class="vtab"></div>
          The example below demonstrates one way module and submodule loading can be implemented.
          ```
          /* Scripts/example.js */

          const mymodule = require('mymodule/lib.js'); // Loads Scripts/modules/mymodule/lib.js
          mymodule.init(); // Prints "Loaded mymodule", "Loaded mymodule's submodule"
          ```
          ```
          /* Scripts/modules/mymodule/lib.js */

          const submodule = require('./submodule.js'); // Loads Scripts/modules/mymodule/submodule.js

          function init() {
              console.log("Loaded mymodule");
              submodule.init(); // Prints "Loaded mymodule's submodule"
          }
        
          module.exports = {
              init: init
          };
          ```
          ```
          /* Scripts/modules/mymodule/submodule.js */

          function init() {
              console.log("Loaded mymodule's submodule");
          }

          module.exports = {
              init: init
          };
          ```

  - name: exec
    js:   exec(command[, options])
    ts:   "exec(command: string, options?: Object): string"
    desc: |
          Executes a system command. Does not return until the subprocess exits.
          <div class="vtab"></div>
          Returns the standard output of the subprocess as a string.
          <div class="vtab"></div>
          `options` may contain any of the following properties:
          <div class="vtab"></div>
          <table>
          <tr><td>`showWindow`</td><td>If `true`, the window of the subprocess is visible. `false` by default.</td></tr>
          <tr><td>`verbose`</td><td>If `true`, the output of the subprocess is sent to the script manager console. `false` by default.</td></tr>
          <tr><td>`cwd`</td><td>Current working directory of the subprocess. By default this is the directory containing Project64.</td></tr>
          </table>
          <div class="vtab"></div>
          This function throws an error if the operation fails or if the exit code of the subprocess is non-zero.
          The thrown error object contains the following properties:
          <div class="vtab"></div>
          <table>
          <tr><td>`status`</td><td>The exit code of the subprocess.</td></tr>
          <tr><td>`stdout`</td><td>The standard output of the subprocess.</td></tr>
          <tr><td>`stderr`</td><td>The standard error output of the subprocess.</td></tr>
          <tr><td>`pid`</td><td>The PID of the subprocess.</td></tr>
          </table>
          ```
          try {
              exec("dir", { verbose: true });
          } catch(err) {
              console.log("exec() failed with code", err.status);
              console.log(err.stderr);
          }
          ```

  - name: alert
    js:   alert(message[, caption])
    ts:   "alert(message: string, caption?: string): void"
    desc: |
          Shows a message box over the main window. Does not return until the message box is dismissed.

  - name: RGBA
    js:   RGBA(r, g, b[, alpha])
    ts:   "RGBA(r: number, g: number, b: number, alpha?: number)"
    desc: |
          Returns an RGBA32 number representation of a color.
          The `r`, `g`, and `b` parameters each have a range of `0` to `255`. The optional `alpha` parameter has a range of `0.0` to `1.0` and is `1.0` by default.
          ```
          const clrYellow = RGBA(255, 255, 0); // 0xFFFF00FF
          const clrTranslucentRed = RGBA(255, 0, 0, 0.5); // 0xFF000080
          ```

  - name: RGBA
    js:   RGBA(existingColor[, newAlpha])
    ts:   "RGBA(existingColor: number, newAlpha: number)"
    desc: |
          Returns `existingColor` with a replaced alpha value.
          ```
          const clrTranslucentRed = RGBA(COLOR_RED, 0.5); // 0xFF000080
          ```

#  - name: RGBA_2
#    js:   RGBA(color, alpha)
#    ts:   "RGBA(color: number, alpha: number)"
#    desc: |
#          Replaces the alpha channel of an existing RGBA32 color and returns the result.
#          ```
#          const clrTranslucentRed = RGBA(COLOR_RED, 0.5); // 0xFF000080
#          ```

  - name: number.hex
    js:   number.hex([numChars])
    ts:   "number.hex(numChars?: number): string"
    desc: |
          Returns a hexadecimal string representation of the number object.
          The returned string is prepended with zeroes so that its character length is `numChars` or 8 by default.
          ```
          var n = 123;
          n.hex();  // 0000007B
          n.hex(4); // 007B
          ```

# global constants
- name: Global constants
  props:
  - name: type_ids
    js:   Type IDs
    desc: |
          <table>
          <tr><td>`u8`  </td><td>Unsigned 8-bit integer</td></tr>
          <tr><td>`u16` </td><td>Unsigned 16-bit integer</td></tr>
          <tr><td>`u32` </td><td>Unsigned 32-bit integer</td></tr>
          <tr><td>`s8`  </td><td>Signed 8-bit integer</td></tr>
          <tr><td>`s16` </td><td>Signed 16-bit integer</td></tr>
          <tr><td>`s32` </td><td>Signed 32-bit integer</td></tr>
          <tr><td>`f32` </td><td>32-bit single precision floating-point</td></tr>
          <tr><td>`f64` </td><td>64-bit double precision floating-point</td></tr>
          <tr><td>`u64` </td><td>Unsigned 64-bit integer</td></tr>
          <tr><td>`s64` </td><td>Signed 64-bit integer</td></tr>
          </table>
          <div class="vtab"></div>
          Note: The [mem.bind*](#mem_bindvar)/[mem.typedef](#mem_typedef) APIs do not currently support `u64` and `s64`.

  - name: N64_memory_addresses
    js:   N64 memory addresses
    desc: |
          <table>
          <tr><td>`RDRAM_CONFIG_REG`       </td><td>0xA3F00000</td></tr>
          <tr><td>`RDRAM_DEVICE_TYPE_REG`  </td><td>0xA3F00000</td></tr>
          <tr><td>`RDRAM_DEVICE_ID_REG`    </td><td>0xA3F00004</td></tr>
          <tr><td>`RDRAM_DELAY_REG`        </td><td>0xA3F00008</td></tr>
          <tr><td>`RDRAM_MODE_REG`         </td><td>0xA3F0000C</td></tr>
          <tr><td>`RDRAM_REF_INTERVAL_REG` </td><td>0xA3F00010</td></tr>
          <tr><td>`RDRAM_REF_ROW_REG`      </td><td>0xA3F00014</td></tr>
          <tr><td>`RDRAM_RAS_INTERVAL_REG` </td><td>0xA3F00018</td></tr>
          <tr><td>`RDRAM_MIN_INTERVAL_REG` </td><td>0xA3F0001C</td></tr>
          <tr><td>`RDRAM_ADDR_SELECT_REG`  </td><td>0xA3F00020</td></tr>
          <tr><td>`RDRAM_DEVICE_MANUF_REG` </td><td>0xA3F00024</td></tr>
          <tr><td>`SP_MEM_ADDR_REG`        </td><td>0xA4040000</td></tr>
          <tr><td>`SP_DRAM_ADDR_REG`       </td><td>0xA4040004</td></tr>
          <tr><td>`SP_RD_LEN_REG`          </td><td>0xA4040008</td></tr>
          <tr><td>`SP_WR_LEN_REG`          </td><td>0xA404000C</td></tr>
          <tr><td>`SP_STATUS_REG`          </td><td>0xA4040010</td></tr>
          <tr><td>`SP_DMA_FULL_REG`        </td><td>0xA4040014</td></tr>
          <tr><td>`SP_DMA_BUSY_REG`        </td><td>0xA4040018</td></tr>
          <tr><td>`SP_SEMAPHORE_REG`       </td><td>0xA404001C</td></tr>
          <tr><td>`SP_PC_REG`              </td><td>0xA4080000</td></tr>
          <tr><td>`SP_IBIST_REG`           </td><td>0xA4080004</td></tr>
          <tr><td>`DPC_START_REG`          </td><td>0xA4100000</td></tr>
          <tr><td>`DPC_END_REG`            </td><td>0xA4100004</td></tr>
          <tr><td>`DPC_CURRENT_REG`        </td><td>0xA4100008</td></tr>
          <tr><td>`DPC_STATUS_REG`         </td><td>0xA410000C</td></tr>
          <tr><td>`DPC_CLOCK_REG`          </td><td>0xA4100010</td></tr>
          <tr><td>`DPC_BUFBUSY_REG`        </td><td>0xA4100014</td></tr>
          <tr><td>`DPC_PIPEBUSY_REG`       </td><td>0xA4100018</td></tr>
          <tr><td>`DPC_TMEM_REG`           </td><td>0xA410001C</td></tr>
          <tr><td>`DPS_TBIST_REG`          </td><td>0xA4200000</td></tr>
          <tr><td>`DPS_TEST_MODE_REG`      </td><td>0xA4200004</td></tr>
          <tr><td>`DPS_BUFTEST_ADDR_REG`   </td><td>0xA4200008</td></tr>
          <tr><td>`DPS_BUFTEST_DATA_REG`   </td><td>0xA420000C</td></tr>
          <tr><td>`MI_INIT_MODE_REG`       </td><td>0xA4300000</td></tr>
          <tr><td>`MI_MODE_REG`            </td><td>0xA4300000</td></tr>
          <tr><td>`MI_VERSION_REG`         </td><td>0xA4300004</td></tr>
          <tr><td>`MI_NOOP_REG`            </td><td>0xA4300004</td></tr>
          <tr><td>`MI_INTR_REG`            </td><td>0xA4300008</td></tr>
          <tr><td>`MI_INTR_MASK_REG`       </td><td>0xA430000C</td></tr>
          <tr><td>`VI_STATUS_REG`          </td><td>0xA4400000</td></tr>
          <tr><td>`VI_CONTROL_REG`         </td><td>0xA4400000</td></tr>
          <tr><td>`VI_ORIGIN_REG`          </td><td>0xA4400004</td></tr>
          <tr><td>`VI_DRAM_ADDR_REG`       </td><td>0xA4400004</td></tr>
          <tr><td>`VI_WIDTH_REG`           </td><td>0xA4400008</td></tr>
          <tr><td>`VI_H_WIDTH_REG`         </td><td>0xA4400008</td></tr>
          <tr><td>`VI_INTR_REG`            </td><td>0xA440000C</td></tr>
          <tr><td>`VI_V_INTR_REG`          </td><td>0xA440000C</td></tr>
          <tr><td>`VI_CURRENT_REG`         </td><td>0xA4400010</td></tr>
          <tr><td>`VI_V_CURRENT_LINE_REG`  </td><td>0xA4400010</td></tr>
          <tr><td>`VI_BURST_REG`           </td><td>0xA4400014</td></tr>
          <tr><td>`VI_TIMING_REG`          </td><td>0xA4400014</td></tr>
          <tr><td>`VI_V_SYNC_REG`          </td><td>0xA4400018</td></tr>
          <tr><td>`VI_H_SYNC_REG`          </td><td>0xA440001C</td></tr>
          <tr><td>`VI_LEAP_REG`            </td><td>0xA4400020</td></tr>
          <tr><td>`VI_H_SYNC_LEAP_REG`     </td><td>0xA4400020</td></tr>
          <tr><td>`VI_H_START_REG`         </td><td>0xA4400024</td></tr>
          <tr><td>`VI_H_VIDEO_REG`         </td><td>0xA4400024</td></tr>
          <tr><td>`VI_V_START_REG`         </td><td>0xA4400028</td></tr>
          <tr><td>`VI_V_VIDEO_REG`         </td><td>0xA4400028</td></tr>
          <tr><td>`VI_V_BURST_REG`         </td><td>0xA440002C</td></tr>
          <tr><td>`VI_X_SCALE_REG`         </td><td>0xA4400030</td></tr>
          <tr><td>`VI_Y_SCALE_REG`         </td><td>0xA4400034</td></tr>
          <tr><td>`AI_DRAM_ADDR_REG`       </td><td>0xA4500000</td></tr>
          <tr><td>`AI_LEN_REG`             </td><td>0xA4500004</td></tr>
          <tr><td>`AI_CONTROL_REG`         </td><td>0xA4500008</td></tr>
          <tr><td>`AI_STATUS_REG`          </td><td>0xA450000C</td></tr>
          <tr><td>`AI_DACRATE_REG`         </td><td>0xA4500010</td></tr>
          <tr><td>`AI_BITRATE_REG`         </td><td>0xA4500014</td></tr>
          <tr><td>`PI_DRAM_ADDR_REG`       </td><td>0xA4600000</td></tr>
          <tr><td>`PI_CART_ADDR_REG`       </td><td>0xA4600004</td></tr>
          <tr><td>`PI_RD_LEN_REG`          </td><td>0xA4600008</td></tr>
          <tr><td>`PI_WR_LEN_REG`          </td><td>0xA460000C</td></tr>
          <tr><td>`PI_STATUS_REG`          </td><td>0xA4600010</td></tr>
          <tr><td>`PI_BSD_DOM1_LAT_REG`    </td><td>0xA4600014</td></tr>
          <tr><td>`PI_BSD_DOM1_PWD_REG`    </td><td>0xA4600018</td></tr>
          <tr><td>`PI_BSD_DOM1_PGS_REG`    </td><td>0xA460001C</td></tr>
          <tr><td>`PI_BSD_DOM1_RLS_REG`    </td><td>0xA4600020</td></tr>
          <tr><td>`PI_BSD_DOM2_LAT_REG`    </td><td>0xA4600024</td></tr>
          <tr><td>`PI_BSD_DOM2_PWD_REG`    </td><td>0xA4600028</td></tr>
          <tr><td>`PI_BSD_DOM2_PGS_REG`    </td><td>0xA460002C</td></tr>
          <tr><td>`PI_BSD_DOM2_RLS_REG`    </td><td>0xA4600030</td></tr>
          <tr><td>`RI_MODE_REG`            </td><td>0xA4700000</td></tr>
          <tr><td>`RI_CONFIG_REG`          </td><td>0xA4700004</td></tr>
          <tr><td>`RI_CURRENT_LOAD_REG`    </td><td>0xA4700008</td></tr>
          <tr><td>`RI_SELECT_REG`          </td><td>0xA470000C</td></tr>
          <tr><td>`RI_REFRESH_REG`         </td><td>0xA4700010</td></tr>
          <tr><td>`RI_COUNT_REG`           </td><td>0xA4700010</td></tr>
          <tr><td>`RI_LATENCY_REG`         </td><td>0xA4700014</td></tr>
          <tr><td>`RI_RERROR_REG`          </td><td>0xA4700018</td></tr>
          <tr><td>`RI_WERROR_REG`          </td><td>0xA470001C</td></tr>
          <tr><td>`SI_DRAM_ADDR_REG`       </td><td>0xA4800000</td></tr>
          <tr><td>`SI_PIF_ADDR_RD64B_REG`  </td><td>0xA4800004</td></tr>
          <tr><td>`SI_PIF_ADDR_WR64B_REG`  </td><td>0xA4800010</td></tr>
          <tr><td>`SI_STATUS_REG`          </td><td>0xA4800018</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`PIF_ROM_START` </td><td>0xBFC00000</td></tr>
          <tr><td>`PIF_RAM_START` </td><td>0xBFC007C0</td></tr>
          <tr><td>`SP_DMEM_START` </td><td>0xA4000000</td></tr>
          <tr><td>`SP_IMEM_START` </td><td>0xA4001000</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`KUBASE`  </td><td>0x00000000</td></tr>
          <tr><td>`K0BASE`  </td><td>0x80000000</td></tr>
          <tr><td>`K1BASE`  </td><td>0xA0000000</td></tr>
          <tr><td>`K2BASE`  </td><td>0xC0000000</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`UT_VEC`  </td><td>0x80000000</td></tr>
          <tr><td>`R_VEC`   </td><td>0xBFC00000</td></tr>
          <tr><td>`XUT_VEC` </td><td>0x80000080</td></tr>
          <tr><td>`ECC_VEC` </td><td>0x80000100</td></tr>
          <tr><td>`E_VEC`   </td><td>0x80000180</td></tr>
          </table>

  - name: Miscellaneous
    js:   Miscellaneous
    desc: |
          <table>
          <tr><td>`M_GFXTASK`</td><td>1</td></tr>
          <tr><td>`M_AUDTASK`</td><td>2</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`G_IM_FMT_RGBA`</td><td>0</td></tr>
          <tr><td>`G_IM_FMT_YUV`</td><td>1</td></tr>
          <tr><td>`G_IM_FMT_CI`</td><td>2</td></tr>
          <tr><td>`G_IM_FMT_IA`</td><td>3</td></tr>
          <tr><td>`G_IM_FMT_I`</td><td>4</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`G_IM_SIZ_4b`</td><td>0</td></tr>
          <tr><td>`G_IM_SIZ_8b`</td><td>1</td></tr>
          <tr><td>`G_IM_SIZ_16b`</td><td>2</td></tr>
          <tr><td>`G_IM_SIZ_32b`</td><td>3</td></tr>
          </table>
          <div class="vtab"></div>
          <table>
          <tr><td>`G_TT_NONE`  </td><td>0x0000</td></tr>
          <tr><td>`G_TT_RGBA16`</td><td>0x8000</td></tr>
          <tr><td>`G_TT_IA16`  </td><td>0xC000</td></tr>
          </table>

- name: JavaScript environment
  desc: |
        <div class="vtab"></div>
        Project64's script system uses [Duktape](https://duktape.org/). Duktape supports ECMAScript E5 and some features from ES2015+.<br>
        See [https://duktape.org/](https://duktape.org/) for more information.

