# console
- name: console
  tagline: Console interface
  props:
  - name: console.log
    js:   console.log(message[, ...])
    ts:   "console.log(message: any, ...optionalParams): void"
    desc: |
          Concatenates all provided text arguments with spaces and prints the result to the console with a trailing newline.
          ```
          console.log("Hello world!");
          ```
  
  - name: console.print
    js:   console.print(message)
    ts:   "console.print(message: any): void"
    desc: Prints `message` to the console.

  - name: console.clear
    js:   console.clear()
    ts:   "console.clear(): void"
    desc: Clears the console.

# mem
- name: mem
  tagline: N64 memory interface
  props:
  - name: mem._
    js:   mem.u8|u16|u32|s8|s16|s32|f32|f64
    desc: |
          Arrays for reading and writing virtual memory. Virtual addresses are used as indices.
          ```
          // Read some data from ROM and RAM
          var firstWordInROM = mem.u32[0xB0000000];
          var firstWordInRAM = mem.u32[0x80000000];
          ```
          ```
          // Move player to 0,0,0 (SM64 US)
          const pPlayerX = 0x8033B1AC;
          const pPlayerY = 0x8033B1B0;
          const pPlayerZ = 0x8033B1B4;

          mem.f32[pPlayerX] = 0;
          mem.f32[pPlayerY] = 0;
          mem.f32[pPlayerZ] = 0;
          ```

  - name: mem.bindvar
    js:   mem.bindvar(object, address, name, typeId)
    ts:   "mem.bindvar(object: Object, address: number, name: string, typeId: number): void"
    desc: |
          Adds a memory-bound property to `object`.
          Valid types are `u8`, `u16`, `u32`, `s8`, `s16`, `s32`, `f32`, `f64`.
          See [Type IDs](#type_ids) for more details.
          ```
          mem.bindvar(this, 0x8033B1AC, 'playerX', f32);
          mem.bindvar(this, 0x8033B1B0, 'playerY', f32);
          mem.bindvar(this, 0x8033B1B4, 'playerZ', f32);

          console.log("Player's coordinates are ", this.playerX, this.playerY, this.playerZ);
          ```

  - name: mem.bindvars
    js:   mem.bindvars(object, vars)
    ts:  "mem.bindvars(object: Object, vars: any[]): Object"
    desc: |
          Adds multiple memory-bound properties to `object`.
          `vars` must be an array in which each item is an array containing an address, name, and [type ID](#type_ids) (in order) describing a variable.
          <div class="vtab""></div>
          Returns `object`.
          ```
          mem.bindvars(this, [
              [ 0x8033B1AC, 'playerX', f32 ],
              [ 0x8033B1B0, 'playerY', f32 ],
              [ 0x8033B1B4, 'playerZ', f32 ]
          ]);

          console.log("Player's coordinates are ", this.playerX, this.playerY, this.playerZ);
          ```

  - name: mem.bindstruct
    js:   mem.bindstruct(object, address, properties)
    ts:   "mem.bindstruct(object: Object, address: number, properties: Object): Object"
    desc: |
          Adds multiple memory-bound properties to `object`.
          `properties` must be an object in which each key/value pair specifies the name and [type ID](#type_ids) of a variable.
          The offset of a variable is determined by its definition order and the sum of type sizes of the variables preceding it.
          <div class="vtab""></div>
          Returns `object`.
          <div class="vtab""></div>
          ```
          var playerPos = mem.bindstruct({}, 0x8033B1AC, { x: f32, y: f32, z: f32 });

          console.log("Player's coordinates are ", playerPos.x, playerPos.y, playerPos.z);
          ```

  - name: mem.typedef
    js:   mem.typedef(properties)
    ts:   "mem.typedef(properties: Object): MemTypeConstructor"
    desc: |
          Returns a constructor function that will create an object representing a structure in memory, given its address.
          ```
          const vec3f = mem.typedef({ x: f32, y: f32, z: f32 });
          var playerAngle = new vec3f(0x8033B19C);
          var playerPos = new vec3f(0x8033B1AC);
          ```

# events
- name: events
  tagline: Emulation event hooking interface
  props:
  - name: events.onexec
    js:   events.onexec(address, callback)
    ts:   "events.onexec(address: number | AddressRange, callback: () => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the program counter is at `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          <font color=red>TODO API change: callback no longer receives pc.</font>
          <div class="vtab""></div>
          Returns a callback ID.
          ```
          events.onexec(0x802CB1C0, function() {
              console.log("func_802CB1C0 was called");
          })
          ```
          ```
          // Log every CPU step
          events.onexec(ADDR_ANY, function() {
              console.log("PC is at", gpr.pc.hex());
          })
          ```
  - name: events.onread
    js:   events.onread(address, callback)
    ts:   "events.onread(address: number | AddressRange, callback: (readAddress: number) => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the CPU is going to read from `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          `callback` receives the address the CPU is going to read from.
          <div class="vtab""></div>
          Returns a callback ID.

  - name: events.onwrite
    js:   events.onwrite(address, callback)
    ts:   "events.onwrite(address: number | AddressRange, callback: (writeAddress: number) => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the CPU is going to write to `address`.
          `address` may be a single address or an object containing `start` and `end` address properties (e.g. [AddressRange](#AddressRange)).
          `callback` receives the address the CPU is going to write to.
          <div class="vtab""></div>
          Returns a callback ID.

  - name: events.onopcode
    js:   events.onopcode(address, opcode, mask, callback)
    ts:   "events.onopcode(address: number | AddressRange, opcode: number, mask: number, callback: () => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the program counter is at `address` and
          `opcode` is equal to the current opcode ANDed with `mask`.
          <div class="vtab""></div>
          Returns a callback ID.
          ```
          const JAL = 0x0C000000; // 'JAL 0x00000000'
          const NO_TARGET = 0xFC000000; // Mask off target field

          events.onopcode(ADDR_ANY, JAL, NO_TARGET, function() {
              // Log PC at every JAL
              console.log(gpr.pc.hex());
          });
          ```

  - name: events.onopcode
    js:   events.onopcode(address, opcode, callback)
    ts:   "events.onopcode(address: number | AddressRange, opcode: number, callback: () => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the program counter is at `address` and
          `opcode` is equal to the current opcode.
          <div class="vtab""></div>
          Returns a callback ID.

  - name: events.ongprvalue
    js:   events.ongprvalue(address, registers, value, callback)
    ts:   "events.ongprvalue(address: number | AddressRange, regFlags: number, value: number, callback: (regIndex: number) => void): number"
    tags: [[Requires interpreter core, blue]]
    desc: |
          Registers a callback that will be invoked at the beginning of a CPU step if the program counter is at `address` and at least one
          of the general purpose registers specified by `regFlags` is equal to `value`. `callback` receives the index of the first register that is
          equal to `value`.
          <div class="vtab""></div>
          Returns a callback ID.
          <div class="vtab""></div>
          See [General purpose register flags](#GPR_flags) for a list of valid flags. Multiple registers may be specified via bitwise OR.
          ```
          const IS64_SIGNATURE = 0x49533634;
          events.ongprvalue(ADDR_ANY, GPR_ANY, IS64_SIGNATURE, function() {
              // Break when any general purpose register contains 0x49533634
              debug.breakhere();
          });
          ```

  - name: events.ondraw
    js:   events.ondraw(callback)
    ts:   "events.ondraw(callback: () => void): number"
    desc: |
          Registers a callback that will be invoked immediately after Project64 requests a screen update from the graphics plugin.
          <div class="vtab""></div>
          Returns a callback ID.

  - name: events.remove
    js:   events.remove(callbackId)
    ts:   "events.remove(callbackId: number): void"
    desc: |
          Unregisters the callback specified by `callbackId`.
          ```
          var id = events.onexec(0x802CB1C0, function() {
              // This is only invoked once
              console.log("func_802CB1C0 was called");
              events.remove(id);
          });
          ```

# screen
- name: screen
  tagline: Screen drawing interface
  props:
  - name: screen.print
    js:   screen.print(x, y, text)
    ts:   "screen.print(x: number, y: number, text: string): void"
    tags: [[Unstable, red]]
    desc: |
          Prints text to the screen at the provided `x` and `y` coordinates.
          Should be called from an [events.ondraw](#events_ondraw) callback.
          ```
          events.ondraw(function() {
              screen.print(20, 20, "Power: " + mem.u8[0x8033B21E]);
          });
          ```


# gpr
- name: gpr
  tagline: CPU general purpose register interface
  props:
  - name: gpr._
    js:   gpr.r0|at|v0|v1..ra
    js2:  gpr[0..31]
    ts:   gpr.r0|at|v0|v1|a0|a1|a2|a3|t0|t1|t2|t3|t4|t5|t6|t7|s0|s1|s2|s3|s4|s5|s6|s7|t8|t9|k0|k1|gp|sp|fp|ra
    desc: Variables representing the lower 32 bits of the CPU's general purpose registers.

  - name: gpr.hi
    js:   gpr.hi
    desc: Variable representing the lower 32 bits of the CPU's HI register.

  - name: gpr.lo
    js:   gpr.lo
    desc: Variable representing the lower 32 bits of the CPU's LO register.

  - name: gpr.pc
    js:   gpr.pc
    desc: Variable representing the CPU's program counter.

# ugpr
- name: ugpr
  tagline: CPU general purpose register interface (upper bits)
  props:
  - name: ugpr._
    js:   ugpr.r0|at|v0|v1..ra
    js2:  ugpr[0..31]
    ts:   ugpr.r0|at|v0|v1|a0|a1|a2|a3|t0|t1|t2|t3|t4|t5|t6|t7|s0|s1|s2|s3|s4|s5|s6|s7|t8|t9|k0|k1|gp|sp|fp|ra
    desc: Variables representing the upper 32 bits of the CPU's general purpose registers.

  - name: ugpr.hi
    js:   ugpr.hi
    desc: Variable representing the upper 32 bits of the CPU's HI register.

  - name: ugpr.lo
    js:   ugpr.lo
    desc: Variable representing the upper 32 bits of the CPU's LO register.

# gpr
- name: fpr
  tagline: CPU floating-point register interface
  props:
  - name: fpr._
    js:   fpr.f0..f31
    js2:  fpr[0..31]
    desc: Variables representing the CPU's 32-bit floating-point registers.

# gpr
- name: dfpr
  tagline: CPU floating-point register interface (64-bit)
  props:
  - name: dfpr._
    js:   dfpr.f0..f30
    js2:  dfpr[0..30]
    desc: Variables representing the CPU's 64-bit floating-point registers.

# cop0
- name: cop0
  tagline: CPU Coprocessor 0 register interface
  props:
  - name: cop0.cause
    js:   cop0.cause
    desc: Variable representing the Cause register. Updates interrupts when written.

# debug
- name: debug
  tagline: Debugger interface
  props:
  - name: debug.breakhere
    js:   debug.breakhere()
    ts:   "debug.breakhere(): void"
    desc: |
          Pauses emulation and shows the CPU commands window. Useful for creating conditional breakpoints.
          ```
          events.onexec(0x802CB1C0, function() {
              if(gpr.a0 == 21) {
                  console.log("21 passed to func_802CB1C0, breaking...");
                  debug.breakhere();
              }
          });
          ```

# asm
- name: asm
  tagline: ASM utilities
  props:
  - name: asm.gprname
    js:   asm.gprname(regIndex)
    ts:   "asm.gprname(regIndex: number): string"
    desc: |
          Returns the name of the general purpose register specified by `regIndex`.
          ```
          asm.gprname(4); // returns 'a0'
          ```

# fs
- name: fs
  tagline: File system interface
  props:
  - name: fs.open
    js:   fs.open(path, mode)
    ts:   "fs.open(path: string, mode: string): number"
    desc: |
          Opens the file pointed to by `path` in the mode specified by `mode`.
          See [fopen](https://pubs.opengroup.org/onlinepubs/009604599/functions/fopen.html) for a list of valid modes.
          <div class="vtab""></div>
          Returns a file descriptor.

  - name: fs.close
    js:   fs.close(fd)
    ts:   "fs.close(fd): void"
    desc: Closes the file referenced by `fd`.

  - name: fs.write
    js:   fs.write(fd, buffer[, offset[, length[, position]]])
    ts:   "fs.write(fd: number, buffer: string | Buffer | ArrayBuffer, offset?: number, length?: number, position?: number): number"
    desc: |
          Writes `buffer` to the file referenced by file descriptor `fd`. `buffer` may be one of the following types&#58;
          [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
          [Buffer](https://nodejs.org/api/buffer.html),
          [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView),
          [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray), string.<br><br>
          `offset`&#58; optional position in the source buffer.<br>
          `length`&#58; optional maximum number of bytes to write.<br>
          `position`&#58; optional file position.
          <div class="vtab""></div>
          Returns the number of bytes written.
          ```
          var fd = fs.open("file.txt", "wb");
          fs.write(fd, "hello\n");
          fs.write(fd, "world\n");
          fs.close();
          ```

  - name: fs.writeFile
    js:   fs.writeFile(path, buffer)
    ts:   "fs.writeFile(path: string, buffer: string | Buffer | ArrayBuffer): void"
    desc: |
          Writes `buffer` to the file specified by `path`. Uses mode "wb" internally.
          ```
          var ramdump = mem.getblock(0x80000000, 0x00400000);
          fs.writeFile("ramdump.bin", ramdump);
          ```

  - name: fs.read
    js:   fs.read(fd, buffer, offset, length, position)
    ts:   "fs.read(fd: number, buffer: Buffer | ArrayBuffer, offset: number, length: number, position: number) : number"
    desc: |
          Reads data from the file referenced by `fd` into `buffer`. `buffer` may be one of the following types&#58;
          [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer),
          [Buffer](https://nodejs.org/api/buffer.html),
          [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView),
          [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray).<br><br>
          `offset`&#58; position in the source buffer.<br>
          `length`&#58; number of bytes to read.<br>
          `position`&#58; file position.
          <div class="vtab""></div>
          Returns the number of bytes read.

  - name: fs.readFile
    js:   fs.readFile(path)
    ts:   "fs.readFile(path: string): Uint8Array"
    desc: |
          Returns a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) representing the data of the file specified by `path`.
          Uses mode "rb" internally.

  - name: fs.fstat
    js:   fs.fstat(fd)
    ts:   "fs.fstat(fd: number): fs.Stats"
    desc: |
          Returns an [fs.Stats](#fs_Stats) object containing information about the file referenced by `fd`.

  - name: fs.stat
    js:   fs.stat(path)
    ts:   "fs.stat(path: string): fs.Stats"
    desc: |
          Returns an [fs.Stats](#fs_Stats) object containing information about the file specified by `path`.

  - name: fs.unlink
    js:   fs.unlink(path)
    ts:   "fs.unlink(path: string): boolean"
    desc: |
          Deletes the file specified by `path`. Returns `true` if the operation is successful.

  - name: fs.mkdir
    js:   fs.mkdir(path)
    ts:   "fs.mkdir(path: string): boolean"
    desc: |
          Creates a directory. Returns `true` if the operation is successful.

  - name: fs.rmdir
    js:   fs.rmdir(path)
    ts:   "fs.rmdir(path: string): boolean"
    desc: |
          Deletes a directory. The directory must be empty. Returns `true` if the operation is successful.

  - name: fs.readdir
    js:   "fs.readdir(path)"
    ts:   "fs.readdir(path: string): string[]"
    desc: |
          Returns an array of file names from a directory.

  - name: fs.Stats
    js:   fs.Stats
    desc: |
          Object containing information about a file or directory. Generated by [fs.fstat/fs.stat](#fs_fstat).
          <div class="vtab""></div>
          <table style="width: 100%">
          <tr><td><b>stats.dev</b></td><td>ID of the device the file resides on</td></tr>
          <tr><td><b>stats.ino</b></td><td>inode number</td></tr>
          <tr><td><b>stats.mode</b></td><td>File permissions</td></tr>
          <tr><td><b>stats.nlink</b></td><td>Number of links to the file</td></tr>
          <tr><td><b>stats.uid</b></td><td>User ID</td></tr>
          <tr><td><b>stats.gid</b></td><td>Group ID</td></tr>
          <tr><td><b>stats.rdev</b></td><td>Device ID (if file is character or block special)</td></tr>
          <tr><td><b>stats.size</b></td><td>Size of the file in bytes</td></tr>
          <tr><td><b>stats.atimeMs</b></td><td>Last access timestamp in milliseconds</td></tr>
          <tr><td><b>stats.mtimeMs</b></td><td>Last modification timestamp in milliseconds</td></tr>
          <tr><td><b>stats.ctimeMs</b></td><td>Creation timestamp in milliseconds</td></tr>
          <tr><td><b>stats.atime</b></td><td>JS Date object representing the last access time</td></tr>
          <tr><td><b>stats.mtime</b></td><td>JS Date object representing the last modification time</td></tr>
          <tr><td><b>stats.ctime</b></td><td>JS Date object representing the creation time</td></tr>
          </table>
          <div class="vtab""></div>
          <b>stats.isDirectory()</b><br>
          <div class="tsproto">stats.isDirectory(): boolean</div>
          <div class="vtab""></div>
          Returns `true` if the `fs.Stats` object describes a directory.
          <div class="vtab""></div>
          <b>stats.isFile()</b><br>
          <div class="tsproto">stats.isFile(): boolean</div>
          <div class="vtab""></div>
          Returns `true` if the `fs.Stats` object describes a regular file.

# script
- name: script
  tagline: Script instance configuration interface
  props:
  - name: script.listen
    js:   script.listen(inputListener)
    ts:   "script.listen(inputListener: (input: string) => void): void"
    desc: |
          Sets a console input listener function.
          Console input will be passed to `inputListener` rather than being evaluated as JS code.
          The listener may be unset by calling `script.listen(undefined)`.
          ```
          script.listen(function(input) {
              input = input.split(' ');
              var command = input.shift();
              var args = input;
              switch(command) {
                  case "ping":
                      console.log("pong (args were:", args.join(', '), ")");
                      return;
                  case "end":
                      console.log("done");
                      script.listen(undefined);
                      return;
                  default:
                      console.log("unknown command '" + command + "'");
              }
          });
          ```

  - name: script.keepalive
    js:   script.keepalive(bKeepAlive)
    ts:   "script.keepalive(bKeepAlive: boolean): void"
    desc: |
          Prevents the script instance from being destroyed when it has nothing left to do.
          Useful when the default console input behavior is desired.

  - name: script.timeout
    js:   script.timeout(milliseconds)
    ts:   "script.timeout(milliseconds: number): void"
    desc: |
          Sets the maximum amount of time tasks may run on the script instance before errors are thrown. By default this value is 500 milliseconds.
          Setting this value to zero will allow tasks to run indefinitely.

# global definitions
- name: Global definitions
  props:
  - name: alert
    js:   alert(message[, caption])
    ts:   "alert(message: string, caption?: string): number"
    desc: |
          Shows a message box with an optional caption. The calling thread is blocked until the message box is dismissed.

  - name: number.hex
    js:   number.hex([numChars])
    ts:   "number.hex(numChars?: number): string"
    desc: |
          Returns a hexadecimal string representation of the number object.
          The returned string is prepended with zeroes until its character length meets `numChars` or 8 by default.
          ```
          var n = 123;
          n.hex();  // 0000007B
          n.hex(4); // 007B
          ```

  - name: AddressRange
    js:   new AddressRange(start, end)
    ts:   "new AddressRange(start: number, end: number)"
    desc: |
          Creates an immutable object with `start` and `end` address properties.

          The following `AddressRange` objects are defined globally&#58;<br>
          <pre>
          `ADDR_ANY`              0x00000000 &#58; 0xFFFFFFFF Any address
          `ADDR_ANY_KUSEG`        0x00000000 &#58; 0x7FFFFFFF MIPS user mode TLB mapped segment
          `ADDR_ANY_KSEG0`        0x80000000 &#58; 0x9FFFFFFF MIPS cached unmapped segment
          `ADDR_ANY_KSEG1`        0xA0000000 &#58; 0xBFFFFFFF MIPS uncached unmapped segment
          `ADDR_ANY_KSEG2`        0xC0000000 &#58; 0xFFFFFFFF MIPS kernel mode TLB mapped segment
          `ADDR_ANY_RDRAM`        0x80000000 &#58; 0x807FFFFF Cached RDRAM
          `ADDR_ANY_RDRAM_UNC`    0xA0000000 &#58; 0xA07FFFFF Uncached RDRAM
          `ADDR_ANY_CART_ROM`     0x90000000 &#58; 0x95FFFFFF Cached cartridge ROM
          `ADDR_ANY_CART_ROM_UNC` 0xB0000000 &#58; 0xB5FFFFFF Uncached cartridge ROM
          </pre>

  - name: type_ids
    js:   Type IDs
    desc: |
          Global type IDs for [mem.typedef](#mem_typedef) and [mem.bind*](#mem_bindvar) APIs.
          <pre>
          `u8`  Unsigned 8-bit integer
          `u16` Unsigned 16-bit integer
          `u32` Unsigned 32-bit integer
          `s8`  Signed 8-bit integer
          `s16` Signed 16-bit integer
          `s32` Signed 32-bit integer
          `f32` 32-bit single precision floating-point
          `f64` 64-bit double precision floating-point
          </pre>

  - name: GPR_flags
    js:   General purpose register flags
    desc: |
          Global flags for [events.ongprvalue](#events_ongprvalue)'s `regFlags` parameter.
          <pre>
          `GPR_ANY`

          `GPR_R0` `GPR_AT` `GPR_V0` `GPR_V1` `GPR_A0` `GPR_A1` `GPR_A2` `GPR_A3`
          `GPR_T0` `GPR_T1` `GPR_T2` `GPR_T3` `GPR_T4` `GPR_T5` `GPR_T6` `GPR_T7`
          `GPR_S0` `GPR_S1` `GPR_S2` `GPR_S3` `GPR_S4` `GPR_S5` `GPR_S6` `GPR_S7`
          `GPR_T8` `GPR_T9` `GPR_K0` `GPR_K1` `GPR_GP` `GPR_SP` `GPR_FP` `GPR_RA`
          </pre>
    
- name: JavaScript environment
  desc: |
        <div class="vtab""></div>
        Project64's script system uses [duktape](https://duktape.org/). duktape supports ECMAScript E5 and some features from ES2015+.<br>
        See [https://duktape.org/](https://duktape.org/) for more information.

